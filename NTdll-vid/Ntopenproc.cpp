#include <Windows.h>
#include <stdio.h>
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)

/*------STRUCTURES---------*/ 

typedef struct _UNICODE_STRING
{
	USHORT Length;
	USHORT MaximumLength;
	_Field_size_bytes_part_opt_(MaximumLength, Length) PWCH Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES
{
	ULONG Length;
	HANDLE RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG Attributes;
	PVOID SecurityDescriptor; // PSECURITY_DESCRIPTOR;
	PVOID SecurityQualityOfService; // PSECURITY_QUALITY_OF_SERVICE
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;  //Instead ref 2nd site..

typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
} CLIENT_ID, * PCLIENT_ID;


/*----------Function Prototype---------*/

typedef NTSTATUS (NTAPI* (NtOpenProcess))(
	_Out_ PHANDLE ProcessHandle,
	_In_ ACCESS_MASK DesiredAccess,
	_In_ POBJECT_ATTRIBUTES ObjectAttributes,
	_In_opt_ PCLIENT_ID ClientId
);



int main(int argc, char* argv[]) {

	DWORD PID			= NULL;
	HANDLE hThread		= NULL;
	HANDLE hProcess		= NULL;
	HMODULE NtdllHandle = NULL;
	PVOID rBuffer		= NULL;
	NTSTATUS STATUS		= NULL;
	

	unsigned char shellcode[] = "\x41\x41\x41\x41";

	if (argc < 2) {
		printf("Usage: %s <PID>\n", argv[0]);
		return -1;
	}

	PID = atoi(argv[1]);

	NtdllHandle = GetModuleHandleW(L"NTDLL");
	if (!NtdllHandle) {
		printf("[GetModuleHandleW] failed, error: 0x%lx", GetLastError());
		return FALSE;
	}
	printf("[0x%p] got the address of NTDLL!", NtdllHandle);
	
	OBJECT_ATTRIBUTES OA = { sizeof(OA) , NULL };
	CLIENT_ID CID = { (HANDLE)PID , NULL };

	puts("Populating Functions ...\n");
	/*Syntax : <Function Prototype Defined> <name> = (<FPD>)GetProcAddress(<handle> , '<function name>')*/
	NtOpenProcess NtOpenProc = (NtOpenProcess)GetProcAddress(NtdllHandle, "NtOpenProcess");

	printf("Getting a handle to process  [ %ld ]\n", PID);
	//hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);
	STATUS = NtOpenProc(&hProcess, PROCESS_ALL_ACCESS, &OA, &CID);
	if (STATUS != STATUS_SUCCESS) {
		printf("[ %ld ]: open process failed. ERROR : %lx\n", PID, STATUS);
		return EXIT_FAILURE;
	}
	puts("Handle to process successful...\n");
	printf("Process  handle at [ 0x%lx ]\n", hProcess);


CLEANUP:

	if (hProcess) {
		puts("Closing handle on Process\n");
		CloseHandle(hProcess);
	}
	puts("Done");
	return EXIT_SUCCESS;
}